<!DOCTYPE html>
<html lang="en">
	<head>
		<title>dataParser</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
		<script src="lib/papaparse.min.js"></script>
		<script src="nlp.js"></script>
	</head>
	<style>
		body { 	font-family:Segoe UI,Verdana,Geneva,sans-serif;font-size:16px; margin:20px; }
		.co-is 		{	border-radius:16px; padding:0 8px; height: 24px; border:1px solid #999; font-size: 13px; text-align:center; }
		.co-bs 		{	display:inline-block; border-radius:16px; padding:0 16px; border:1px solid #999; font-size: 13px; 
						cursor:pointer; z-index:2; padding-bottom:1px; color:#000; background-color: #eee; font-weight:600; }
		.co-bsg		{	cursor: pointer; color:#fff; text-align: center; border-radius: 16px; display: inline-block; user-select: none;
						font-size: 13px; background-color: #999; padding: 2px 8px 2px 8px; }
		.lz-confirm {	position: absolute;  width: 300px; padding: 16px; left: calc(50% - 150px); top: calc(50% - 50px); user-select: none;	
						border-radius: 8px; background-color: #fff; border: 1px solid #999; box-shadow: 4px 2px 12px 2px #aaa; }
	</style>
	<body>
		<div style="width:66%;margin:0 auto;text-align:center">
			<img src="img/lizalogo.png" style="width:25%">
			<span style="font-size:24px;vertical-align:12px"><b> dataParser</b></span>
			<hr>
			Scene: <select class="co-is" id="lz-scene">
				<option>All</option><option>0</option><option>1</option>><option>2</option>
				</select>
			&nbsp &nbsp; Series: <select class="co-is" id="lz-series">
				<option>All</option><option>100</option><option>200</option><option>
				300</option><option>400</option><option>500</option>
			</select>
			&nbsp &nbsp; Use decimals? <input type="checkbox" checked id="lz-dots"/>
			&nbsp &nbsp; Number per series: <input type="input" class="co-is" style="width:40px" value="500" id="lz-num"/>
			&nbsp &nbsp; Exclude: <input type="input" class="co-is" style="width:40px" value="90-100" id="lz-session"/>
			<hr><p>
				<div class="co-bs" id="lz-makeTrain">Make nlu.yml</div>
				&nbsp &nbsp &nbsp;<div class="co-bs" id="lz-makeResponse">Make response</div>
				&nbsp &nbsp &nbsp;<div class="co-bs" id="lz-makeSession">Make session</div>
				&nbsp &nbsp &nbsp;<div class="co-bs" id="lz-makeStories">Make stories</div>
			</p>
			<hr>
			<p id="outp" style="text-align:left"></p>
		</div>
	
<script>

/////////////////////////////////////////////////////////////////////////////////////////////////
// APP 
/////////////////////////////////////////////////////////////////////////////////////////////////

	let rawData=[], intents=[], responses=[], keyWords=[];
	let nlp=new NLP();																				// Alloc NLP class

	$(document).ready(function() {								           						// ON PAGE LOADED
		LoadConfig();
		$("#lz-makeTrain").on("click",()=>   { MakeStories(1);    } );								// ON MAKE TRAINING FILE
		$("#lz-makeResponse").on("click",()=>{ MakeStories(8);    } );								// ON MAKE RESPONSE
		$("#lz-makeSession").on("click", ()=>{ MakeSession();     } );								// ON MAKE SESSION
		$("#lz-makeStories").on("click", ()=>{ MakeStories(1|2|4) } );								// ON MAKE ALL 3 FILES
		$(window).on("keydown",function(e) {														// HANDLE KEYPRESS
			if ((e.which == 84) && e.altKey && e.ctrlKey)	{										// Test key (Ctrl+Alt+T)
				GetTextBox("Type intent","","",(s)=>{ WitTrainIntent(s); });	
			}
			});
		});

	function LoadConfig()																		// LOAD CONFIG FILE
	{	
		let i,k,o,v,intent;
		fetch('assets/config.csv')																	// Load file
			.then(res => res.text())																// Get as text
			.then(res =>{																			// Process																	
				let data=Papa.parse(res, { header:true, skipEmptyLines:true }).data;				// Parse CSV using papa lib
				nlp.SetWho(data);																	// Set student synonyms
				LoadRawData('assets/rawData.csv');													// Load raw data file
			});
		}
	
	function LoadRawData(file)																	// LOAD RAW DATA CSV
	{
		fetch(file)																					// Load file
			.then(res => res.text())																// Get as text
			.then(res =>{																			// Process																	
				rawData=Papa.parse(res, { header:true, skipEmptyLines:true }).data;					// Parse CSV using papa lib
				GetKeyWords();																		// Get keywords
				ParseData();																		// Parse data and show stats
			});
	}

	function ParseData()																		// PARSE DATA AND SHOW DATA STATS
	{
		let i,o;
		let nRemarks=0, nResponses=0; 																// Counts
		let trigger=[];																				// Triggering teacher's remarks
		for (i=0;i<rawData.length;++i) {															// For each entry
			o=rawData[i];																			// Point at line
			if (!o.intent)	continue;																// Skip no intents
			if (o.speaker == "Teacher") {															// A remark
				if (o.text.split(" ").length < 4)	continue;										// Skip short remarks
				trigger+=o.text+" ";																// Add to response trigger text
				++nRemarks;																			// Add to count											
				if (!intents["r"+Math.floor(o.intent)]) intents["r"+Math.floor(o.intent)]=[];		// Create base intent holder
				if (!intents["r"+o.intent]) intents["r"+o.intent]=[];								// Create full holder
				intents["r"+Math.floor(o.intent)].push(i);											// Add base index
				intents["r"+o.intent].push(i);														// Add full
				}
			else{																					// A student response
				++nResponses;																		// Add response
				}
			}
		
		let str=`<table>
		<tr><td><b>Number of remarks</b>:</td><td>${nRemarks}</td></tr>
		<tr><td><b>Number of responses</b>: &nbsp; </td><td>${nResponses}</td></tr>`
		str+=getIntents()+"</table>";																// Get number of intents
		$("#outp").html(str.replace(/\t|\n|\r/g,""));												// Show stats

		function getIntents() {																		// GET INTENTS
			let i,j,s="";
			for (i=0;i<1000;i+=10) 																	// For each intent
				if (intents["r"+i]) 																// If it exists	
					s+=`<tr><td><b>Intent ${i}</b>:</td><td>${intents["r"+i].length}</td><td>${getSubIntents(i)}</td></tr>`;
			return s;																				// Return intent line
			}

		function getSubIntents(base) {																// GET NUMBER OF SUB INTENTS
			let i,s="( &nbsp;";
			for (i=1;i<10;++i) 																		// For for subs
				if (intents["r"+base+"."+i]) 														// If it exists	
					s+=i+"="+intents["r"+base+"."+i].length+" &nbsp;";								// Add to string
			return s+")";																			// Return subs
			}
	}		

	function GetKeyWords()																		// GET UNIQUE LIST OF WORDS
	{
		let i,j,k,v;
		keyWords=[];																				// Clear array
		for (i=0;i<rawData.length;++i) {															// For each line
			v=nlp.Tokenize(rawData[i].text);														// Tokenize line
			for (j=0;j<v.length;++j) 																// For each word															
				if (v[j].length > 4)																// If big enough	
					keyWords.push(v[j]);															// Add to key word list	
			}
		keyWords=[... new Set(keyWords)];															// Make unique
	}

/////////////////////////////////////////////////////////////////////////////////////////////////
// OUTPUT 
/////////////////////////////////////////////////////////////////////////////////////////////////

	async function MakeSession()																// CREATE SESSION FILE
	{
		let i,o,session=[],texts=[];
		let fields=["scene","actor","code","calc","text"];											// Field names
		let teacher=$("#lz-session").val().split("-")[0];											// Teacher to add
			for (i=0;i<rawData.length;++i) {														// For each line
			o=rawData[i];																			// Point at it
			if (o.rerid != teacher) 	continue;													// Skip if not right teacher
			texts.push(o.text);																		// Add to array of texts
			session.push({ scene:o.topic, actor:o.speaker, code:o.intent, calc:0, text:o.text });	// Add line 
			}
		
		const fetchAll=async(texts) => {															// GET ALL INTENTS AT ONCE
  			let i,n;
			const res   = await Promise.all(texts.map(t => GetResponse(t)));						// Ask for intents
  			const jsons = await Promise.all(res.map(r => r.json()));								// Wait for them
			for (i=0;i<jsons.length;++i) {															// For each line
				n=(jsons[i].intent_ranking[0].name == "nlu_fallback") ? 1 : 0;						// Go to second choice
				session[i].calc=jsons[i].intent_ranking[n].name.substr(1);							// Get intent
				}
			let str=Papa.unparse(session,{ header:true, skipEmptyLines:true, columns:fields });		// Make CSV using lib
			SaveTextAsFile("session-"+teacher+".csv",str);											// Write file
			Sound("ding");																			// Sound
			}
		fetchAll(texts);																			// Get all intents
	}

	function GetResponse(msg)																	// GET RESPONSE FROM AI
	{
		return fetch("https://lizasim.com:5005/model/parse", {										// Fetch data
//		return fetch("http://localhost:5005/model/parse", {										// Fetch data
			method:"POST",	
			body: JSON.stringify({text:msg})		
			})
		}

	function MakeStories(mask)																	// MAKE ALL FILES
	{
		let ints=[],doms=[],sess=[],dupes=[];
		let rType,keys=[],resps=[];
		let i,jk,o,c,ss,re,who,id,sid;
		let session=$("#lz-session").val().split("-");												// Session to skip
		let start=session[0],end=session[1];														// Extract range
		if (!end) end=start-0+1;																	// Just one
		let dots=$("#lz-dots").prop("checked");														// Sub-intents?
		let num=$("#lz-num").val();																	// Max per intent

		for (i=0;i<rawData.length;++i) {															// For each line
			o=rawData[i];																			// Point at it
			if ((o.rerid >= start-0) && (o.rerid < end-0))	continue;								// Skip if exclused
			if (nlp.Tokenize(o.text).length < 4)			continue;								// Skip if short
			if (dots) id="r"+o.intent;																// Make fuull intent id name
			else	  id="r"+Math.floor(o.intent);													// Just the whole numbers					
			sid="session-"+o.rerid;																	// Session id
			if (!sess[sid]) 			  sess[sid]=[];												// Alloc session holder
			if (!ints[id] && (id != "r")) ints[id]=[];												// Alloc intent holder
			if (o.speaker == "Teacher") {															// If remark
				keys=nlp.Tokenize(o.text).filter(value => keyWords.includes(value));				// Get keys mentioned
				if (id != "r")	sess[sid].push("  - intent: "+id+"\n");								// Add intent to story
				ss=o.text;																			// Point at text
				who=nlp.GetWho(o.text);																// Get who
				if (who) {																			// Got one
					re=new RegExp(`\\b${who.split(":")[0]}\\b`,"i");								// Make regex
					ss=ss.replace(re,"STUDENT");													// Encode entity
					}
				if (o.intent && (ints[id].length < num)) 											// If under limit and coded
					ints[id].push("        - "+ss.trim().replace(/:/g,"")+"\n");					// Add it,
				}
			else{																					// Response
				rType="agree";
				if (id != "r") resps.push( { intent:id,text: o.text.trim().replace(/:|"/g,""),keys:keys,type:rType,turn:Math.floor(i/2),speaker:who.split(":")[1] });
				if (id != "r") sess[sid].push("  - action: utter_r"+i+"\n");						// Add response to story
				doms.push(`\n  utter_r${i}:\n  - text: "${o.text.trim().replace(/:|"/g,"")}"\n`);	// Add to domain file							
				}
			}

		let str="version: \"2.0\"\n\nnlu:\n";														// NLU header
		str+="- intent: bot_challenge\n  examples: |\n    - are you a bot?\n    - are you a human?\n    - am I talking to a bot?\n    - am I talking to a human?\n";
		for (k in ints)	{																			// For each intent
			str+="- intent: "+k+"\n  examples: |\n";												// Add header
			ints[k]=[... new Set(ints[k])];															// Make unique
			for (i=0;i<ints[k].length;++i) 	str+=ints[k][i];										// Add each remark in intent group
			}
		if (mask&1) SaveTextAsFile("nlu.yml",str);													// Write file

		str="version: \"2.0\"\n\nstories:\n";														// Stories header
		for (k in sess)	{																			// For each session
			c=0;																					// Reswt chunk counter
			for (i=0;i<sess[k].length;++i) {														// For each event in session	
				if (!(c%8)) str+="\n- story: "+k+"-"+c+"\n  steps:\n",c++;							// Add header
				if (sess[k][i].match(/intent/)) {													// First intent
					dupes=[];																		// Clear dupe storage
					for (j=0;j<8;++j) {																// Look for last intent
						if (sess[k][i+j] && !sess[k][i+j].match(/intent/)) break;					// Quit on action
						if (sess[k][i+j])															// If valid
							dupes.push({t:sess[k][i+j],i:sess[k][i+j].substr(13,5)});				// Add to dupe storage
						}
					dupes.sort((a,b)=>{ return b.i-a.i });											// Sort by biggest
					str+=dupes[0] ? dupes[0].t : sess[k][i];										// Add intent
					i+=j;																			// Skip ahead
					if (sess[k][i]) str+=sess[k][i];												// Add action
					++c;																			// Add to count
					}
				}
			}
		if (mask&2) SaveTextAsFile("stories.yml",str);												// Write file

		str="version: \"2.0\"\n\nsession_config:\n";												// Domain header
		str+="  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n\nintents:\n";
		str+="  - bot_challenge\n";																	// Add challenge
		for (k in ints)	str+="  - "+k+"\n";															// Add intent
		str+="\nresponses:\n";																		// Responses header	
		str+=`  utter_iamabot:\n  - text: "I am a bot, powered by LIZA."\n`;						// Bot response
		for (i=0;i<doms.length;++i) 	str+=doms[i];												// Add each remark in intent group
		if (mask&4) SaveTextAsFile("domain.yml",str);												// Write file

		let fields=["intent","speaker","type","turn","keys","text"];								// Field names
		str=Papa.unparse(resps,{ header:true, skipEmptyLines:true, columns:fields });				// Make CSV using lib
		if (mask&8) SaveTextAsFile("responses.csv",str);											// Write file
		Sound("ding");																				// Sound

/*		
		for (k in ints)	{																			// For each intent
			str="[\n";
			if (k.substr(1) < 150) continue;
			ints[k]=[... new Set(ints[k])];															// Make unique
			for (i=0;i<Math.min(ints[k].length,num);++i) { 											// Add each remark in intent group
				ss=ints[k][i].slice(10,-1);
				ss=ss.replace(/"/g,"");
				ss=ss.replace(/'/g,"\\u0027");
				str+=`{ "data": [{ "text": "${ss}", "userDefined": false }], "isTemplate": false, "count": 1, "lang": "en", "updated": 0 },\n`;
				}
			str=str.slice(0,-2)+"\n]";
			if (k.substr(1) > 200)
			SaveTextAsFile(k.substr(1)+"_usersays_en.json",str);													// Write file
		}

*/

	}

	function ChooseKeywords()
	{
		let i=0,str="";
		$("#outp").html(0+". "+keyWords[0]);														// Show 

		$(window).on("keydown",function(e) {														// HANDLE KEYPRESS
			trace(e.which)
			if (e.which == 37)	{																	// Left arrow
				i=Math.max(i-1,0);																	// Back
				$("#outp").html(i+". <b>"+keyWords[i]+"</b><br><br>"+str);							// Show 
				}
			if (e.which == 39)	{																	// Right arrow
				i=Math.min(i+1,keyWords.length-1);													// Forward
				$("#outp").html(i+". <b>"+keyWords[i]+"</b><br><br>"+str);							// Show 
				}
			if (e.which == 13)	{																	// Right arrow
				str+=keyWords[i]+", ";
				$("#outp").html(i+". <b>"+keyWords[i]+"</b><br><br>"+str);							// Show 
				++i;
				Sound("click")
				}
			if (e.which == 8)	{																	// Back
				let v=str.split(", ");																// Get as  array
				v.pop();																			// Remove last
				v.pop();																			// Remove last
				v=[... new Set(v)];																	// Make unique
				str=v.toString();																	// To string
				str=str.replace(/,/g,", ")+", ";													// Add spaces
				$("#outp").html(i+". <b>"+keyWords[i]+"</b><br><br>"+str);							// Show 
				Sound("delete")
				}
			});
	}

/*///////////////////////////////////////////////////////////////////////////////////////////////
// WIT
/////////////////////////////////////////////////////////////////////////////////////////////////

	function WitTrainIntent(intent)
	{
		let i;
		let n=Math.min(intents[intent].length,199);
		for (i=0;i<n;++i)  WitTrain(intent, rawData[i].text)
	}

	function WitTrain(intent, remark)															// SEND REMARK TO WIT
	{
		const url="https://api.wit.ai/utterances?v=20210922";										// URL
		let token="57CTW-X-CFRZYAIGCB-X-PHA6E5QT4-X-FG3IOR6O".replace(/-X-/g,"");					// Get token
		intent=intent.replace(/\./,"_");															// Modify intent to suitb Wit
		let body=[{ text:remark, intent:intent, entities:[], traits: [] }];							// Make body
		trace(body)
		fetch(url,{ method:"POST",
			  headers: { Authorization:'Bearer '+token, 'Content-Type':'application/json'}, 
			  body: JSON.stringify(body)
			  })	
	  	.then(res => res.json()).then(res =>{ trace(res); })
	}
*/



/////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS 
/////////////////////////////////////////////////////////////////////////////////////////////////

	function trace(msg, p1, p2, p3, p4)																// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

	function Sound(sound, mute)																		// PLAY SOUND
	{
		var snd=new Audio();																			// Init audio object
		if (sound.match(/\.mp3/i))		snd=new Audio(sound)											// If an MP3 file
		else							snd=new Audio("img/"+sound+".mp3");								// Use built in mp3
		if (!mute)	{																					// If not initing or muting	
			snd.volume=100/100;																			// Set volume
			snd.play();																					// Play it
			}
		}

	function SaveTextAsFile(file, contents)															// SAVE TEXT TO LOCAL FILE
	{
		if (file.charAt(0) == "*") {																	// If asking
			GetTextBox("Type file name","", file.substr(1), (s)=>{ SaveTextAsFile(s, contents); });		// Ask for name
			return;																						// Quit
			}
		var textFileAsBlob=new Blob([contents], {type:'text/plain'});
		var downloadLink=document.createElement("a");
		downloadLink.download=file;
		downloadLink.innerHTML="Download File";
		downloadLink.href=window.URL.createObjectURL(textFileAsBlob);
	    downloadLink.onclick=()=>{ downloadLink.remove(); };
		downloadLink.style.display="none";
		downloadLink.id="tdll";
		document.body.appendChild(downloadLink);
		downloadLink.click();
	}

	function GetTextBox(title, content, def, callback)											// GET TEXT LINE BOX
	{
		$("#confirmBoxDiv").remove();																	// Remove 
		$("body").append("<div class='lz-confirm' id='confirmBoxDiv'></div>");							// Add box								
		var str="<img src='img/lizalogo.png' width='64' style='vertical-align:-8px'/>&nbsp;&nbsp;";								
		str+="<span style='font-size:14px; color:#666'><b>"+title+"</b></span><br><br>";
		str+="<p>"+content+"<p>";
		str+="<p><input class='lz-is' style='width:75%' type='text' id='gtBoxTt' value='"+def+"'></p>";
		str+="<div id='dialogOK' class='lz-bs'>OK</div>";
		str+="<div id='dialogCancel' class='lz-bs' style='margin-left:8px;background-color:#999'>Cancel</div></div>";
		$("#confirmBoxDiv").html(str);																	// Add to div
		$("#gtBoxTt").focus();																			// Focus on button
		$("#gtBoxTt").on("change", function() {	callback($("#gtBoxTt").val()); $("#confirmBoxDiv").remove(); });	// ONE ENTER
		$("#dialogOK").on("click", function() {	callback($("#gtBoxTt").val()); $("#confirmBoxDiv").remove(); });	// ON OK 
		$("#dialogCancel").on("click", function() {	$("#confirmBoxDiv").remove(); });								// ON CANCEL
		}


</script>
</body>
</html>

