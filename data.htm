<!DOCTYPE html>
<html lang="en">
	<head>
		<title>dataParser</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
		<script src="lib/papaparse.min.js"></script>
		<script src="nlp.js"></script>
	</head>
	<style>
		body { 	font-family:Segoe UI,Verdana,Geneva,sans-serif;font-size:16px; margin:20px; }
		.co-is 		{	border-radius:16px; padding:0 8px; height: 24px; border:1px solid #999; font-size: 13px; text-align:center; }
		.co-bs 		{	display:inline-block; border-radius:16px; padding:0 16px; border:1px solid #999; font-size: 13px; 
						cursor:pointer; z-index:2; padding-bottom:1px; color:#000; background-color: #eee; font-weight:600; }
		.co-bsg		{	cursor: pointer; color:#fff; text-align: center; border-radius: 16px; display: inline-block; user-select: none;
						font-size: 13px; background-color: #999; padding: 2px 8px 2px 8px; }
	</style>
	<body>
		<div style="width:66%;margin:0 auto;text-align:center">
			<img src="img/lizalogo.png" style="width:25%">
			<span style="font-size:24px;vertical-align:12px"><b> dataParser</b></span>
			<hr>
			Scene: <select class="co-is" id="lz-scene">
				<option>All</option><option>0</option><option>1</option>><option>2</option>
				</select>
			&nbsp &nbsp; Series: <select class="co-is" id="lz-series">
				<option>All</option><option>100</option><option>200</option><option>
				300</option><option>400</option><option>500</option>
			</select>
			&nbsp &nbsp; Use decimals? <input type="checkbox" checked id="lz-dots"/>
			&nbsp &nbsp; Number per series: <input type="input" class="co-is" style="width:40px" value="500" id="lz-num"/>
			&nbsp &nbsp; Exclude: <input type="input" class="co-is" style="width:40px" value="90-100" id="lz-session"/>
			<hr><p>
				<div class="co-bs" id="lz-makeTrain">Make nlu.yml</div>
				&nbsp &nbsp &nbsp; <div class="co-bs" id="lz-makeResponse">Make response</div>
				&nbsp &nbsp &nbsp; <div class="co-bs" id="lz-makeSession">Make session</div>
			</p>
			<hr>
			<p id="outp" style="text-align:left"></p>
		</div>
	
<script>

/////////////////////////////////////////////////////////////////////////////////////////////////
// APP 
/////////////////////////////////////////////////////////////////////////////////////////////////

	let rawData=[], intents=[];

	$(document).ready(function() {								           						// ON PAGE LOADED
		LoadRawData('assets/rawData.csv');															// Load raw data file

		$("#lz-makeTrain").on("click",()=>   { MakeTrain() } );										// ON MAKE TRAINING FILE
		$("#lz-makeResponse").on("click",()=>{ MakeResponse() } );									// ON MAKE RESPONSE
		$("#lz-makeSession").on("click", ()=>{ MakeSession() } );									// ON MAKE SESSION
		$(window).on("keydown",function(e) {														// HANDLE KEYPRESS
			if ((e.which == 84) && e.altKey && e.ctrlKey)	{										// Test key (Ctrl+Alt+T)
				}
			});
	});

	function LoadRawData(file)																	// LOAD RAW DATA CSV
	{
		fetch(file)																					// Load file
			.then(res => res.text())																// Get as text
			.then(res =>{																			// Process																	
				rawData=Papa.parse(res, { header:true, skipEmptyLines:true }).data;					// Parse CSV using papa lib
				ParseData();																		// Parse data and show stats
				});
	}

	function ParseData()																		//PARSE DATA AND SHOW DATA STATS
	{
		let i,o;
		let nRemarks=0, nResponses=0; 
		for (i=0;i<rawData.length;++i) {															// For each entry
			o=rawData[i];																			// Point at line
			if (!o.intent)	continue;
			if (o.actor == "Teacher") {																// A remark
				++nRemarks;																			// Add to count											
				if (!intents["r"+Math.floor(o.intent)]) intents["r"+Math.floor(o.intent)]=[];		// Create base intent holder
				if (!intents["r"+o.intent]) intents["r"+o.intent]=[];								// Create full holder
				intents["r"+Math.floor(o.intent)].push(i);											// Add base index
				intents["r"+o.intent].push(i);														// Add full
				}
			else ++nResponses;																		// Add response
			}
		
		let str=`<table>
		<tr><td><b>Number of remarks</b>:</td><td>${nRemarks}</td></tr>
		<tr><td><b>Number of responses</b>: &nbsp; </td><td>${nResponses}</td></tr>`
		str+=getIntents()+"</table>";																// Get number of intents
		$("#outp").html(str.replace(/\t|\n|\r/g,""));												// Show stats

		function getIntents() {																		// GET INTENTS
			let i,j,s="";
			for (i=0;i<1000;i+=10) 																	// For each intent
				if (intents["r"+i]) 																// If it exists	
					s+=`<tr><td><b>Intent ${i}</b>:</td><td>${intents["r"+i].length}</td><td>${getSubIntents(i)}</td></tr>`;
			return s;																				// Return intent line
			}

		function getSubIntents(base) {																// GET NUMBER OF SUB INTENTS
			let i,s="( &nbsp;";
			for (i=1;i<10;++i) 																		// For for subs
				if (intents["r"+base+"."+i]) 														// If it exists	
					s+=i+"="+intents["r"+base+"."+i].length+" &nbsp;";								// Add to string
			return s+")";																			// Return subs
			}
	}		

	function MakeTrain()																		// CREATE TRAINING YML FILE
	{
		let i,k,o,base;
		let str="version: \"2.0\"\n\nnlu:\n";
		let series=$("#lz-series").val();															// Series to use
		let scene=$("#lz-scene").val();																// Scene to use
		let session=$("#lz-session").val().split("-");												// Session to skip
		let sa=session[0],se=session[1];															// Extract range
		if (!se) se=sa+1;																			// Just one
		let num=$("#lz-num").val();																	// Number to use
		let dots=$("#lz-dots").prop("checked");														// Sub intents?

		for (k in intents) {																		// For each one
			if (!k || (k == 0))				continue;												// Skip unecoded intents
			if (series == "All") {																	// Adding them all
				if (!dots && k.match(/\./)) continue;												// Skip decimals
				if (dots && !k.match(/\./)) continue;												// Skip whole numbers
				if (dots) 					base=k.substr(1);										// Top entry - whole
				else 	  					base=Math.floor(k.substr(1));							// Top decimal
				str+="- intent: r"+base+"\n  examples: |\n";										// Add header
				str+=addIntent("r"+base);															// Add items
				}
			else if (series == Math.floor(k.substr(1)/100)*100)	{									// Adding individually from a series
				if (!dots && k.match(/\./)) continue;												// Skip decimals
				if (dots && !k.match(/\./)) continue;												// Skip whole numbers
				if (dots) base=k.substr(1);															// Top entry - whole
				else 	  base=Math.floor(k.substr(1));												// Top decimal
				str+="- intent: r"+base+"\n  examples: |\n";										// Add header
				str+=addIntent("r"+base);															// Add items
				}
			}
		SaveTextAsFile("nlu.yml",str);																// Write file
		Sound("ding");																				// Sound	
		return str;																					// Return data

		function addIntent(k) {																		// ADD INTENT TO NLU
			let i,o,n=0,s="",ss;
			for (i=0;i<intents[k].length;++i) {														// For each one
				o=rawData[intents[k][i]];															// Point at item
				if ((o.teacher-0 >= sa-0) && (o.teacher-0 < se-0)) continue;						// An excluded one
				ss=o.text.replace(/luis|farrah|chris|jazmin|oliver/i,"STUDENT");					// Put in students	
				s+="        - "+ss.trim()+"\n";														// Add remark
				n++;																				// Advance count
				if (n > num)	break;																// Only so many
				}
			return s;																				// Return intents group
			}
	}

	function MakeSession()																		// CREATE SESSION FILE
	{
		let i,o,session=[];
		let fields=["scene","actor","code","text"];													// Field names
		let teacher=$("#lz-session").val().split("-")[0];											// Teacher to add
		for (i=0;i<rawData.length;++i) {															// For each line
			o=rawData[i];																			// Point at it
			if (o.teacher != teacher) 	continue;													// Skip if not right teacher
			if (!o.intent)				continue;													// Skip if not coded																			
			session.push({ scene:o.topic, actor:o.actor, code:o.intent, text:o.text });				// Add line 
			}	
		let str=Papa.unparse(session,{ header:true, skipEmptyLines:true, columns:fields });			// Make CSV using lib
		SaveTextAsFile("session-"+teacher+".csv",str);												// Write file
		Sound("ding");																				// Sound	
		return str;																					// Return data
	}

/////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS 
/////////////////////////////////////////////////////////////////////////////////////////////////

	function trace(msg, p1, p2, p3, p4)																// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

	function Sound(sound, mute)																		// PLAY SOUND
	{
		var snd=new Audio();																			// Init audio object
		if (sound.match(/\.mp3/i))		snd=new Audio(sound)											// If an MP3 file
		else							snd=new Audio("img/"+sound+".mp3");								// Use built in mp3
		if (!mute)	{																					// If not initing or muting	
			snd.volume=100/100;																			// Set volume
			snd.play();																					// Play it
			}
		}

	function SaveTextAsFile(file, contents)															// SAVE TEXT TO LOCAL FILE
	{
		if (file.charAt(0) == "*") {																	// If asking
			GetTextBox("Type file name","", file.substr(1), (s)=>{ SaveTextAsFile(s, contents); });		// Ask for name
			return;																						// Quit
			}
		var textFileAsBlob=new Blob([contents], {type:'text/plain'});
		var downloadLink=document.createElement("a");
		downloadLink.download=file;
		downloadLink.innerHTML="Download File";
		downloadLink.href=window.URL.createObjectURL(textFileAsBlob);
	    downloadLink.onclick=()=>{ downloadLink.remove(); };
		downloadLink.style.display="none";
		downloadLink.id="tdll";
		document.body.appendChild(downloadLink);
		downloadLink.click();
	}

</script>
</body>
</html>

