<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>Liza chat</title>
		<link REL="SHORTCUT ICON" HREF="img/favicon.ico">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
		<script src="lib/papaparse.min.js"></script>
		<script src="nlp.js"></script>
	</head>
	<style>
		body 		{ 	font-family:Segoe UI,Verdana,Geneva,sans-serif; font-size:10px; padding:0px; box-sizing:content-box; margin:0;
						background-image:url("img/clouds.jpg");  background-repeat: no-repeat; background-attachment:fixed; background-size:100% 100%; } 
		.co-splash 	{ 	position:absolute; width:100%; top:0; left:0; text-align:center; margin-top:15%; display:none; font-size:12px; }
		.co-chat	{	position:absolute; width:320px; height:480px; background-color:#f8f8f8; border-radius:12px; left:calc(50% - 172px); top:150px; 
						border:1px solid #666; padding:12px; text-align:center; font-size:14px; box-shadow:4px 4px 8px #999; }
		.co-textR 	{	background-color:#ddd; border-radius:8px; border-top-left-radius:0; margin:0 8px;   
						padding:4px 8px; width:-moz-fit-content; width:fit-content; max-width: 66%; clear:both; float:left; text-align:left; }
		.co-textRA 	{	clear:both; float:left; margin:-8px 0 0 8px; width:0; height:0; border-bottom:8px solid #dddddd; border-right:12px solid transparent; margin-left:8px; }
		.co-textS 	{	background-color:#0099ff; border-radius:8px; border-bottom-right-radius:0;
						padding:4px 8px; width:-moz-fit-content; width:fit-content; max-width: 66%; margin:8px 8px 0 0; clear:both; float:right; text-align:right; color:#fff; }
		.co-textSA 	{	clear:both; float:right; margin-right:8px; width:0; height:0; border-top:8px solid #0099ff; border-left:12px solid transparent; }
		.co-is 		{	border-radius:8px; padding:0 8px; width:250px; height: 24px; border:1px solid #999; font-size: 13px; }
		.co-logon 	{	border-radius:16px; padding:0 8px; width:200px; height: 24px; border:1px solid #999; font-size: 13px; text-align:center; }
		.co-confirm {	position: absolute;  width: 300px; padding: 16px; left: calc(50% - 300px); top: calc(50% - 150px); user-select: none;	
						border-radius: 8px; background-color: #fff; border: 1px solid #999; }
		.co-alert	{	position:absolute; color:#fff; font-size:12px; text-align:center; cursor:pointer; padding:4px; top:8px; }
		.co-is 		{	border-radius:16px; padding:0 8px; height: 24px; border:1px solid #999; font-size: 13px; }
		.co-bs 		{	display:inline-block; border-radius:16px; padding:0 8px; border:1px solid #999; font-size: 13px; 
						cursor:pointer; z-index:2; padding-bottom:1px; color:#000}
		.co-bsg		{	cursor: pointer; color:#fff; text-align: center; border-radius: 16px; display: inline-block; user-select: none;
						font-size: 13px; background-color: #999; padding: 2px 8px 2px 8px; }
		.co-popup 	{	position: absolute;  width:auto; padding:12px; left:40%; top:calc(50% - 50px); border-radius:8px; display: none;
						background-color:#fff; border:1px solid #999; font-size:14px; text-align:center; max-width:33%; min-width:20%; }
		body ::-webkit-scrollbar { width: 9px; height:8px } 
		body ::-webkit-scrollbar-track { background: transparent; }
		body ::-webkit-scrollbar-thumb { border-radius:8px ;background:#a4baec }
		body ::-webkit-scrollbar-thumb:hover { background: #a4baec }

		@media only screen and (max-width:700px) {
			.co-chat { 	width: calc(100% - 26px); height:calc(100vh - 26px); margin:0; top:0; left:0; 
						border-radius:0; border: none; overflow:hidden; }
			}

	</style>
	<body>
		<input type="file" id="lz-tempFile" accept=".csv" style="display:none">
		<div class="co-bs" id="lz-importData" style="margin:12px">Load responses</div>
		&nbsp; &nbsp;<span id="lz-stats"></span>
	<script>

/////////////////////////////////////////////////////////////////////////////////////////////////
// APP 
/////////////////////////////////////////////////////////////////////////////////////////////////

class App {																																										

	constructor()   																			// CONSTRUCTOR
	{
		this.csv=[];																				// Holds loaded session
		this.curWho="Class";																		// Person being addressed
		this.curKeys=[];																			// Currently active keys
		this.keywords=[];																			// Keywords
		this.session=[];																			// session
		this.rescodes=[];																			// Response codes
		this.chat=new Chat();																		// Alloc chat
		this.LoadConfig();																			// Load config file
		this.nlp=new NLP();																			// Load NLP
		this.hasDots=true;																			// Trained with dots
		this.curRes=0;																				// Response counter
		}

	ImportCSV(e)																				// IMPORT SESSION FROM CSV
	{	
		let k,d,i,o;
		let file=e.target.files[0];																	// Point at file
		if (!file) 	return;																			// Quit if bad
		let reader=new FileReader();																// Init reader
		reader.readAsText(file);																	// Read file
		reader.onload=(e)=>{ 																		// When loaded
		d=Papa.parse(e.target.result, { header:true, skipEmptyLines:true }).data;					// Parse CSV using papa lib
		this.responses=[];																			// Fresh
		for (i=0;i<d.length;++i) {																	// For each line
			if (!d[i]["Student"])	continue;														// Skip if no student
			o={};																					// Init object
			k=d[i]["Student"].split(" ")[0];														// Getn first name
			if (!this.responses[k]) this.responses[k]=[];											// Add base array
			o.bakB=d[i]["Valued/Belonging (200/300"];												// Get factor
			o.bakA=d[i]["Academic Language (400)"];													// Get factor
			o.bakK=d[i]["Knowledge (400)"];															// Get factor
			o.bakT=d[i]["Thinking (500)"];															// Get factor
			o.bakU=d[i]["Understanding Level"];														// Get factor
			o.text=d[i]["Response"];																// Get response
			o.intent=d[i]["Type of Student Response"].substring(0,3);								// Get intent
			o.type=d[i]["Type of Student Response"].substr(3);										// Get type
			o.action=d[i]["Student Physical Action"];												// Get action
			this.responses[k].push(o);																// Add to list
			}				
		let str="<div style='position:absolute;left:calc(50% - 172px);top:670px;width:344px;text-align:center''>";
		str+="<div id='lastres' class='co-bs' style='float:left'>Previous</div>";
		str+="<div id='nextres' class='co-bs' style='float:right'>Next</div><br>";
		str+="<p id='rescode'   style='font-size:20px'></p>";
		str+="<div id='oldres'  style='font-size:14px'></div>";
		$("#codingDiv").append(str+"</div>")
			Sound("ding");																			// Ding
			$("#nextres").on("click",()=>{															// ON NEXT
				let i,n=app.session.length;
				for (i=app.curRes+1;i<n;++i)														// Look for next
					if (app.session[i].intent > 300 && app.session[i].remark)	break;				// If past 300, quit looking
				app.curRes=Math.min(i,n);															// Set spot							
				showRes();																			// Show it
				});

			$("#lastres").on("click",()=>{															// ON PREVIOUS
				for (i=app.curRes-1;i>=0;--i)														// Look for next
					if (app.session[i].intent > 300 && app.session[i].remark)	break;				// If past 300, quit looking
				app.curRes=Math.max(i,0);															// Back
				showRes();																			// Show it
				});

			$("[id^=rcode-]").on("change",(e)=>{													// ON CHANGE CODE
				let k=e.target.id.substr(6);														// Get genre
				app.session[app.curRes].code=k+"-"+$("#rcode-"+k).val();							// Set new code					
				$("#rcode-"+k).val(k);																// Reset
				showRes();																			// Show it
				});

			$("#addres").on("change",(e)=>{															// ON ADD CODE
				app.session[app.curRes].code=$("#addres").val();									// Set new code					
				$("#addres").val("");																// Reset
				showRes();																			// Show it
				});

			$("#saveres").on("click",()=>{															// ON SAVE
				let fields=["id","intent","student","code","remark","response"];					// Field names
				str=Papa.unparse(app.session,{ header:true, skipEmptyLines:true, columns:fields }); // Make CSV using lib
		 		app.SaveTextAsFile("session.csv",str);											// Write file
				Sound("ding");																		// Ding
				});

			function showRes() {																	// SHOW RES IN  CHAT WINDOW
				let o=app.session[app.curRes];														// Point at session line
				$("#co-textDiv").html("<div class='co-textS'><b>TEACHER: </b>"+o.remark+"</div>");	// Add remark
				$("#co-textDiv").append("<div class='co-textSA'></div>");							// Add to display 
				$("#co-textDiv").append("<div class='co-textRA'></div>");							// Add triangle
				let s=app.nlp.CleanRemark(o.remark);

				let random=" "+app.nlp.vocab.r100[Math.floor(Math.random()*500)];
				    random+=" "+app.nlp.vocab.r100[Math.floor(Math.random()*500)];
				    random+=" "+app.nlp.vocab.r200[Math.floor(Math.random()*400)];
				
				app.chat.RasaResponse(s,app.session[app.curRes].intent, (res, id)=>{
					let str="<b>Original response to id "+app.session[app.curRes].id+"</b>:<br><i>"+app.session[app.curRes].response+"</i>";
					let col=Math.floor(id/100)*100 == res.intent.name.substr(1) ? "#009900" : "#990000";
					if (id < 300)	col="#666";
					$("#rescode").css("color",col);
					$("#rescode").html("<b>"+res.intent.name.substr(1)+"</b> <i>(coded as "+id+")</i>");
					$("#oldres").html(str);
					str=app.GetResponse(s,o.student,res.intent.name.substr(1));
					$("#co-textDiv").append("<div class='co-textR'><b>"+o.student.toUpperCase()+": </b>"+str+"</div>");	// Add response
					});
			}
		};
	}

	GetResponse(remark, student, intent)														// GET STUDENT RESPONSE
	{
		let i,d=[];
		let o=app.responses[student];																// Isolate student
		for (i=0;i<o.length;++i)																	// For each responss
			if (intent == Math.floor(o[i].intent/100)*100) d.push(o[i]);							// Isolate matching intents
		i=Math.floor(Math.random()*d.length);														// Pick random match 
		return d[i].text;
	}


	LoadConfig()																				// LOAD CONFIG FILE
	{	
		let i,d;
		fetch('data/config.csv')																	// Load file
			.then(res => res.text())																// Get as text
			.then(res =>{																			// Process																	
				d=Papa.parse(res, { header:true, skipEmptyLines:true }).data; 						// Parse CSV using papa lib
				for (i=0;i<d.length;++i) 															// For each line
					 this.nlp.AddSyns(d[i].type,d[i].id,d[i].text.split(",")); 						// Add synonyms, keywords, keytags, vocab
			});
		fetch('data/session.csv')																	// Load file
			.then(res => res.text())																// Get as text
			.then(res =>{																			// Process																	
				this.session=[];																	// Null array
				d=Papa.parse(res, { header:true, skipEmptyLines:true }).data; 						// Parse CSV using papa lib
					for (i=0;i<d.length;++i) if (d[i].student == "Farrah") this.session.push(d[i]); // Add if chosen student
			});
		}

	SetKeywords(data)																			// PROCESS KEYWORDS																	
	{
		let i,v,o;
		for (i=0;i<data.length;++i) {																// For each line
			o=data[i];																				// Point at line
			if (o.type != "keywords")	continue;													// Only keywords	
			this.keywords=o.text.toLowerCase().split(",");											// Array of keywords
		}
	}

	ParseRemark(intent, text)																	// PARSE DATA FROM REMARK
	{
		let i,j,s,o,who="";
		let keys=[];																				// Clear current keys array
		let v=app.Tokenize(text);																	// Tokenize incoming text	
		for (i=0;i<v.length;++i) {																	// For each word
			if (this.keywords.includes(v[i])) keys.push(v[i]);										// Add to current keys list					
			if (typeof(app.nlp.whoSyns[v[i]]) == "string")											// A valid string
				who=app.nlp.whoSyns[v[i]];															// Set who
			}
		v=this.session["r"+intent];																// Point at session to this intent

		if (v && keys.length) {																		// If a valid intent and some keys in remark
			for (i=0;i<v.length;++i) {																// For each response
				s=0;																				// Reset count	
				v[i].keyScore=0;																	// Reset key score
				o=v[i].keywords;																	// Point at keywords
				for (j=0;j<o.length;++j)															// For each key in response
					if (keys.includes(o[j]))	++s;												// Add to count
				v[i].keyScore=s/keys.length;														// Calc key score
				}
			v.sort((a, b) => a.keyScore < b.keyScore);												// Sort by key score
		}
		return who;																					// Return last who encountered
	}

	Tokenize(text) 																				// TOKENIZE TEXT
	{
		text=(" "+text).replace(/\{.*?\}/g,"");														// Remove text in braces
		text=text.trim().toLowerCase().replace(/[^a-z0-9 \+\-\*\/\'\%\$\=]/g,"");					// Keep only germane chars(alph, space, num, *-+/'%$)
		return text.toLowerCase().split(/ +/);														// Return tokenized lowercase array
	}

	GetRemark(msg)																				// GET REMARK FROM AI
	{
		fetch("http://localhost:5005/webhooks/rest/webhook", {										// Fetch data
			method:"POST",
			body: JSON.stringify({sender:"bill", message:msg})		
			})
 		.then(response => response.json())
  		.then(data => console.log(data));		
		}
		
	SaveTextAsFile(file, contents)																// SAVE TEXT TO LOCAL FILE
	{
		if (file.charAt(0) == "*") {																// If asking
			GetTextBox("Type file name","", file.substr(1), (s)=>{ app.SaveTextAsFile(s, contents); });	// Ask for name
			return;																					// Quit
			}
		var textFileAsBlob=new Blob([contents], {type:'text/plain'});
		var downloadLink=document.createElement("a");
		downloadLink.download=file;
		downloadLink.innerHTML="Download File";
		downloadLink.href=window.URL.createObjectURL(textFileAsBlob);
	    downloadLink.onclick=()=>{ downloadLink.remove(); };
		downloadLink.style.display="none";
		downloadLink.id="tdll";
		document.body.appendChild(downloadLink);
		downloadLink.click();
	}

} // App class closure


/////////////////////////////////////////////////////////////////////////////////////////////////
// CHAT 
/////////////////////////////////////////////////////////////////////////////////////////////////

class Chat {																					

	constructor()   																			// CONSTRUCTOR
	{
		this.VoiceInit((s)=> { 																		// Init TTS/STT
			$("[id^=co-revText]").each(function() { 												// For each input
				let v=$(this).val();																// Get value of input																		
				if (v) v+=" ";																		// Add a space if something there
				$(this).val(v+s);																	// Set text
				})
			});				
		}

		AddLine(o)																				// ADD DATA LINE TO CHAT
		{
			this.SendChat(o.text)
		}

		Draw()																					// DRAW CHAT CLIENT
		{
			$("#co-chat").remove();                                                                 // Close chat if open
			let str=`<div id='co-chat' class='co-chat'>
				<img src="img/lizalogo64.png"><br>
				<div id="co-textDiv" 
				style="height:calc(100% - 88px);overflow-x:hidden;overflow-y:auto;background-color:#fff;
				margin-top:8px;border:1px solid #999;border-radius:8px;padding:4px 4px"></div>														
				<div style="position:absolute;top:calc(100% - 36px);width:100%;text-align:left">
					<input id="co-revText" placeholder="Type here or speak" class='co-is' style='width:calc(100% - 70px);height:24px;outline:none;'>			
					<img id='co-talkBut'src='img/talkbut.png' style='vertical-align:-3px;margin-left:-22px;width:16px;cursor:pointer'>
					<img id='co-revTextBut'src='img/sendtext.png' style='vertical-align:-7px;margin-left:12px;cursor:pointer'>
					</div>	
				</div>
				<div id="codingDiv"></div>`;
			$("body").append(str.replace(/\t|\n|\r/g,""));												// Add chatbox
			
			$("#co-revText").focus();																	// Focus on input
			$("#co-textDiv").scrollTop(10000);															// Scroll to bottom
			$("#co-talkBut").on("click",    ()=>{this.Listen("")});										// ON TALK
			$("#co-revText").on("change",   ()=>{ this.SendChat(); });									// ON TEXT ENTER
			$("#co-revTextBut").on("click", ()=>{ this.SendChat(); });									// ON SEND CLICK 
			}

		SendChat()																					// TEXT CHATTING
		{
			let origIntent="",origResponse="";
			let s=$("#co-revText").val();																// Get text textbox
			if (!s && app.csv) { 																		// If getting from CSV file
				s=app.csv[0].text;																		// Get text
				origIntent=app.csv[0].code ? app.csv[0].code : "not coded";								// Get original intent
				if (!app.dots) origIntent=Math.floor(origIntent);										// Just looking at whole numbes
				origResponse=app.csv[0].response;														// Get original response
				app.csv.shift(); 																		// Next remark
				}									
			if (s) {																					// If something there
				$("#co-textDiv").append("<div class='co-textS'>"+s+"</div>");							// Add to triangle 
				$("#co-textDiv").append("<div class='co-textSA'></div>");								// Add to display 
				$("#co-textDiv").scrollTop(10000);														// Scroll to bottom
				app.chat.RasaResponse(s,null,(o)=>{														// Send to AI
					let n=(o.intent_ranking[0].name == "nlu_fallback") ? 1 : 0;							// Go to second choice
					let intent=o.intent_ranking[n].name.substr(1);										// Get intent
					let who=app.ParseRemark(intent,s);													// Parse remark for data
					if (who) app.curWho=who;															// Set latrest person mentioned
					let res=`<span style="font-weight:600">${app.curWho.toUpperCase()}</span>: 
					Intent </b>${intent} - ${Math.round(o.intent_ranking[n].confidence*100)}%`;			// Main line
					if (origIntent)		res+=` vs. <span style="color:#${(origIntent == intent) ? "009900" : "990000"}">${origIntent}</span>`;
//					if (origResponse)	res+=" -><i>&quot;"+origResponse+"&quot;</i>";					// Add response
					$("#co-textDiv").append("<div class='co-textRA'></div>");							// Add triangle
					$("#co-textDiv").append("<div class='co-textR'>"+res+"</div><br>");					// Add message
					$("#co-textDiv").scrollTop(10000);													// Scroll to bottom
					});
				}
			$("#co-revText").val("");																	// Clear input
		}

		RasaResponse(msg, id, callback)																// GET RESPONSE FROM AI
		{
			let xhttp=new XMLHttpRequest();																// Alloc hxmlhttp
			xhttp.onreadystatechange = function() {														// ON STATE CHANGE
				if (this.readyState == 4 && this.status == 200) {										// Valid response
					let o=JSON.parse(this.response);													// Objectify
					if (o.intent.name[0] == "r")														// If our intent
						app.dots=o.intent.name[4] == "." ? true : false;								// Set dots flag
					trace(o);																			// Log
					if (callback) callback(o,id);														// Run callback
						return;																			// Quit
					}
				};
			xhttp.open("POST", "https://lizasim.com:5005/model/parse");									// Set url
//			xhttp.open("POST", "http://localhost:5005/model/parse");									// Set url
			xhttp.setRequestHeader("Content-Type", "application/json");									// Set type
			xhttp.send(JSON.stringify({text:msg}));														// Set paqyload
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// VOICE INPUT
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		VoiceInit(callback)																			// INIT TTS/TTS
		{	
			let i;
			try {																						// Try
				var SpeechRecognition=SpeechRecognition || webkitSpeechRecognition;						// Browser compatibility
				this.recognition=new SpeechRecognition();												// Init STT
				this.recognition.continuous=false;														// Continual recognition off
				this.recognition.lang="en-US";															// US English
				this.recognition.interimResults=true
				this.recognition.onend=(e)=> { 															// On end, restore button
					$("[id^=co-talkBut]").each(function() { $(this).prop("src","img/talkbut.png"); })	// For each input
					this.listening=false; 																// Not listening
					;}	
				this.hasRecognition=true;																// Has speechrecognition capabilities														
				let mac=(navigator.platform == "MacIntel");												// A mac?
				this.femaleVoice=mac ? 0 : 1;															// Female voice
				this.maleVoice=mac ? 1 : 0;																// Male voice
				this.voices=[];																			// New array

				speechSynthesis.onvoiceschanged=()=> {													// React to voice init
					this.voices=[];																		// Clear list
					speechSynthesis.getVoices().forEach((voice)=> {										// For each voice
						if (voice.lang == "en-US")						this.voices.push(voice);		// Just look at English
						if (voice.name.match(/Microsoft David/i))		this.voices.push(voice),this.maleVoice=this.voices.length-1;	// Male voice
						if (voice.name.match(/Microsoft Zira/i))		this.voices.push(voice),this.femaleVoice=this.voices.length-1;	// Female voice
						if (voice.name.match(/Alex/i))					this.voices.push(voice),this.maleVoice=this.voices.length-1;	// Mac male voice
						if (voice.name.match(/Samantha/i))				this.voices.push(voice),this.femaleVoice=this.voices.length-1;	// Mac female voice
						});
					};

				this.recognition.onresult=(e)=> { 														// On some speech recognized
					for (i=e.resultIndex;i<e.results.length;++i) {										// For each result
						if (e.results[i].isFinal)														// If final
							callback(e.results[i][0].transcript);										// Send text to callback
						}
					};
			} catch(e) { trace("Voice error",e) };														// On error
		}

		Listen(id)																					// TURN ON SPEECH RECOGNITIOM
		{
			if (this.listening)	return;																	// Quit if already started
			try { this.recognition.start(); this.listening=true; } catch(e) { trace("Voice error",e) };	// Start recognition
			$("#co-talkBut"+id).prop("src","img/intalkbut.png");										// Talking but
		}

		Speak(msg, who="female")																	// SPEAK
		{
			try {																						// Try
				let tts=new SpeechSynthesisUtterance();													// Init TTS
				if (who == "male")	tts.voice=this.voices[this.maleVoice];								// Set male voice
				else 				tts.voice=this.voices[this.femaleVoice];							// Set female voice
				tts.text=msg;																			// Set text
				speechSynthesis.speak(tts);																// Speak
				} catch(e) { trace("TTS error",e) };													// On error
		}

	} // Chat class closure


/////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN
/////////////////////////////////////////////////////////////////////////////////////////////////

	let app=null;

	$(document).ready(function() {								           							// ON PAGE LOADED
		app=new App();                                      										// Alloc app
		app.chat.Draw();																			// Draw chat ui
	
		$("#lz-importData").on("click",()=>{ $("#lz-tempFile").trigger("click"); });				// ON IMPORT
		$("#lz-tempFile").on("change",(e)=>{														// ON FILE LOAD
			app.ImportCSV(e);																		// Read file
			$("#lz-tempFile").val("");																// Clear value		
			});
		$(window).on("keydown",function(e) {														// HANDLE KEYPRESS
			if ((e.which == 84) && e.altKey && e.ctrlKey) {										// Test key (Ctrl+Alt+T)
				GetTextBox("Remark", "Type remark", "", (s)=>{ app.GetRemark(s); } );
				}
			});



		});
	
// HELPERS //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

	function MakeSelect(id, multi, items, sel, extra, values)										// CREATE HTML SELECT
	{
		var	str="<select class='co-is' style='width:100px' id='"+id+"'";								// Header
		str+=" data-lastselect='"+(sel ? sel : '')+"' ";												// Init last selected
		if (multi)																						// Multi select
			str+="multiple='multiple' size='"+multi+"'";												// Add flag
		if (extra)																						// If extra param
			str+=extra;																					// Add them
		str+=">";																						// End header
		for (i=0;i<items.length;++i) {																	// For each option
			str+="<option";																				// Add tag
			if (values && values[i]) {																	// If has a value
				str+=" value='"+values[i]+"'";															// Add it
				if (sel == values[i])	str+=" selected='selected'"										// If value selected, add tag
				}
			else if (sel == items[i])	str+=" selected='selected'"										// If name selected, add tag
			str+=">"+items[i]+"</option>";																// End option
			}	
		return str+"</select>";																			// End select				
	}

	function GetTextBox(title, content, def, callback, x, y)										// GET TEXT LINE BOX
	{
		$("#confirmBoxDiv").remove();																	// Remove 
		$("body").append("<div class='co-confirm' id='confirmBoxDiv' style='text-align:center'></div>");// Add box								
		if (x != undefined)		$("#confirmBoxDiv").css({ left:x+"px", top:y+"px" });					// Position if set
		let str="<img src='img/lisalogo.png' width='64'/><br>";											// Logo					
		str+="<p style='font-size:14px; color:#666'><b>"+title+"</b></p>";
		str+="<p>"+content+"<p>";
		str+="<p><input class='co-is' style='width:95%' type='text' id='co-revText' value='"+def+"'>";
		str+="<div id='dialogOK' class='co-bs' style='background-color:#009900'>OK</div>";
		str+="<div id='dialogCancel' class='co-bs' style='margin-left:8px;background-color:#999'>Cancel</div></div>";
		$("#confirmBoxDiv").html(str);																	// Add to div
		$("#co-revText").focus();																		// Focus on button
		
		$("#co-revText").on("change", function() {	callback($("#co-revText").val()); $("#confirmBoxDiv").remove(); });	// ON ENTER
		$("#dialogOK").on("click", function() {	callback($("#co-revText").val()); $("#confirmBoxDiv").remove(); });		// ON OK 
		$("#dialogCancel").on("click", function() {	$("#confirmBoxDiv").remove(); });									// ON CANCEL
		}

	function Sound(sound, mute)																		// PLAY SOUND
	{
		let snd=new Audio();																			// Init audio object
		if (sound.match(/\.mp3/i))		snd=new Audio(sound)											// If an MP3 file
		else							snd=new Audio("img/"+sound+".mp3");								// Use built in mp3
		if (!mute)	{																					// If not initing or muting	
			snd.volume=100/100;																			// Set volume
			snd.play();																					// Play it
			}
	}

	function Popup(msg, time, div)																	// TIMED POPUP
	{
		let str="";
		$("#co-popupDiv").remove();																		// Kill old one, if any
		if (document.fullscreenElement)	document.exitFullscreen();										// Force non-full screen 
		str+="<div id='co-popupDiv' class='co-popup'>"; 												// Add div
		if (time == -1) {																				// If has close but
			time=100000;																				// Increase time
			str+="<img id='pu-close' src='img/closedot.gif' style='float:right;cursor:pointer'>";		// Add close button
			}
		str+=msg+"</div>"; 																				// Add div
		$(div ? "#"+div : "body").append(str);															// Add popup to div or body
		$("#pu-close").click(function() { $("#co-popupDiv").remove(); });								// Remove on click of close but
		$("#co-popupDiv").fadeIn(500).delay(time ? time : 2000).fadeOut(500)							// Animate in and out		
	}


	function Sound(sound, mute)																		// PLAY SOUND
	{
		var snd=new Audio();																			// Init audio object
		if (sound.match(/\.mp3/i))		snd=new Audio(sound)											// If an MP3 file
		else							snd=new Audio("img/"+sound+".mp3");								// Use built in mp3
		if (!mute)	{																					// If not initing or muting	
			snd.volume=100/100;																			// Set volume
			snd.play();																					// Play it
			}
		}
</script>
</body>
</html>